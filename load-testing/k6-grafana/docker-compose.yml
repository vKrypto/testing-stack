version: '3.4'

networks:
  testing_network:

volumes:
  influxdb_data:

services:
  influxdb:
    image: influxdb:1.8
    networks:
      - testing_network
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6
    volumes:
      - influxdb_data:/var/lib/influxdb  
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8086/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana:latest
    networks:
      - testing_network
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin     # Set your custom username
      - GF_SECURITY_ADMIN_PASSWORD=admin # Set your custom password
      # - GF_AUTH_ANONYMOUS_ORG_ROLE=admin
      - GF_AUTH_ANONYMOUS_ENABLED=false
      # - GF_DATASOURCE_NAME=InfluxDB
      # - GF_DATASOURCE_DB=k6 
      - GF_AUTH_BASIC_ENABLED=false
      - GF_DATASOURCE_URL=http://influxdb:8086
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      # - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - influxdb
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        
  fastapi:
    image: python:3.12.7
    networks:
      - testing_network
    ports:
      - 8000:8000
    volumes:
      - ./fastapi:/app
    command: sh -c "cd /app && pip install -r requirements.txt && uvicorn main:app --host 0.0.0.0 --port 8000 --workers=5"
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://fastapi:8000/ping"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    depends_on:
      - influxdb
    deploy:
      replicas: 20
      update_config:
        parallelism: 5
        delay: 5s
      restart_policy:
        condition: on-failure

  # k6:
  #   image: grafana/k6:latest
  #   networks:
  #     - testing_network
  #   environment:
  #     - K6_OUT=influxdb=http://influxdb:8086/k6
  #   volumes:
  #     - ./k6:/scripts
  #   command: run /scripts/run_docker.js
  #   depends_on:
  #     fastapi:
  #       condition: service_healthy

